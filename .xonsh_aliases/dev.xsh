# Python (p)
aliases['pa'] = 'python app.py'
aliases['pc'] = 'pip-compile'
aliases['pci'] = 'pip install pip-tools '
aliases['pcs'] = 'pip-sync'
aliases['pcu'] = 'pip-compile --upgrade > /dev/null'
aliases['pf'] = 'pip list'
aliases['pi'] = 'pip install '
aliases['pii'] = 'pip install --upgrade pip setuptools'  # Things that won't get auto-updated
aliases['pir'] = 'pip install -r requirements.txt'
aliases['pit'] = 'pip install --upgrade pip pip-tools setuptools'  # Ditto but with pip-tools
aliases['piu'] = 'pip install --upgrade '
aliases['pl'] = 'pylint *'
aliases['pp'] = 'ipython'
aliases['pr?'] = 'pip uninstall '
aliases['prf?'] = 'pip uninstall $(pip freeze)'
aliases['pv'] = 'python -V'
aliases['pw'] = 'pip show '
aliases['py'] = 'python'

# Django (pd)
aliases['pdc'] = 'python manage.py collectstatic '
aliases['pdk'] = 'python manage.py addstatictoken '
aliases['pdm'] = 'python manage.py migrate '
aliases['pdmd'] = 'python manage.py makemigrations --dry-run '
aliases['pdmm'] = 'python manage.py makemigrations '
aliases['pdmp'] = 'python manage.py migrate --plan '
aliases['pdmq'] = 'python manage.py sqlmigrate '
aliases['pdmw'] = 'python manage.py showmigrations '
aliases['pdp'] = 'python manage.py '
aliases['pdq'] = 'python manage.py dbshell'
aliases['pdr'] = 'python manage.py runserver_plus'
aliases['pdrm'] = 'python manage.py runserver'
aliases['pds'] = 'python manage.py shell_plus --print-sql --quiet-load'
aliases['pdsm'] = 'python manage.py shell_plus'
aliases['pdw'] = 'python -W all manage.py '

# Testing (pt, pdt)
aliases['pdt'] = 'python manage.py test --keepdb --exe --verbosity=2 --with-id '
aliases['pdtf'] = 'pdt --failed'
aliases['pdtn'] = 'python manage.py test --keepdb --verbosity=2 '  # without nose

# Python virtual environments (v)
def _curr():
    return  $(pwd).rsplit('/', 1)[1].rstrip()
def _vox_new(args):
    import os
    name = args[0] if args else _curr()
    if len(args) <= 1:
        version = 'python'  # whatever the current python is
    else:
        # Use the specified pyenv version
        version = f'/home/aaron/.pyenv/versions/{args[1]}/bin/python'
    
    ![virtualenv -p @(version) @(os.path.join($VIRTUALENV_HOME, name))]
    vox enter @(name)
def _vox_on(args):
    name = args[0] if args else _curr()
    vox enter @(name)
aliases['ve'] = _vox_on
aliases['vl'] = 'vox list'
aliases['vn'] = _vox_new
aliases['vr?'] = 'vox rm'
aliases['vx'] = 'vox exit'

# Pyenv (vp)
def _pyenv_shell(args):
    $PYENV_VERSION = args[0]
aliases['vpe'] = _pyenv_shell
aliases['vpl'] = 'pyenv versions'
aliases['vpn'] = 'pyenv install '
aliases['vpr?'] = 'pyenv uninstall '

# JavaScript (e)
def es_lint(args):
    if ![./node_modules/.bin/eslint @(args)]:
        print(f"\n\033[1;32m  No errors\033[0m\n")
aliases['el'] = es_lint
aliases['et'] = 'rake jasmine:ci'
aliases['etb'] = 'rake jasmine'  # in-browser

# NodeJS (en)
aliases['eni'] = 'npm install '
aliases['enr'] = 'npm start '

# PyCharm (oc)
aliases['oc'] = '/snap/bin/pycharm-professional'
aliases['ocgd'] = lambda: ![oc @(x[3:] for x in $(git status --porcelain=v1).splitlines())]
aliases['ocgm'] = lambda: ![oc @(x[3:] for x in $(git status --porcelain=v1 | grep '^UU ').splitlines())]
aliases['ocp'] = lambda: ![oc $(bop)]  # open copied text
# Open a series of files generated by running silversearcher
aliases['ocs'] = lambda args: ![oc @($(@(args + ['-l'])).splitlines())]

# Rust (ot)
aliases['otb'] = 'cargo build'
aliases['otbr'] = 'cargo build --release'
aliases['oth'] = 'rustc --explain'
aliases['otl'] = 'cargo clippy'
aliases['otl?'] = 'cargo fmt'
aliases['otr'] = 'cargo run'
aliases['ott'] = 'cargo test'
aliases['otu'] = 'rustup update'

# Logging
$TIMESHEET_FILE = '/home/aaron/zagaran/timesheet.sqlite3'
aliases['ol'] = '~/Documents/rust/timesheet/target/release/timesheet '
aliases['old'] = '~/Documents/rust/timesheet/target/debug/timesheet '  # for testing only
aliases['oll'] = '~/Documents/rust/timesheet/target/release/timesheet list '

# Elastic Beanstalk (re)
aliases['ree'] = 'eb events -f '
aliases['rel'] = 'eb logs '
aliases['res'] = lambda args: print("source /opt/python/current/env && cd /opt/python/current/app && python manage.py shell_plus --print-sql --quiet-load") and ![eb ssh @(args)]
aliases['rey'] = 'eb deploy '
aliases['reyg'] = 'eb deploy --staged '

# Heroku (rh)
aliases['rho'] = 'heroku accounts:set '
aliases['rhol'] = 'heroku accounts '
aliases['rhop'] = 'heroku accounts:set personal '
aliases['rhow'] = 'heroku accounts:set work '
aliases['rhl'] = 'heroku logs -t '
aliases['rhs'] = 'heroku run bash '
aliases['rhss'] = 'heroku run python manage.py shell_plus --print-sql --quiet-load '
aliases['rhy'] = 'git push heroku HEAD:master'
