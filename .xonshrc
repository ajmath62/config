import re

# Useful environment variables
$AUTO_CD = True  # type a directory name to CD to it
$AUTO_PUSHD = True  # always PUSHD instead of CD
$XONSH_SHOW_TRACEBACK = True

# Path
$PATH = ['~/.pyenv/shims', '~/.rbenv/shims', '~/.pyenv/bin'] + $PATH

# Prompt
# Environment display
def _env_name_always():
    env_name = $PROMPT_FIELDS['env_name']()
    if !(test -e ./Gemfile):
        return '(' + $(rbenv version-name).rstrip() + ')'
    elif env_name is not None:
        return env_name
    else:
        return '(' + $(pyenv version-name).rstrip() + ')'
$PROMPT_FIELDS['env_name_always'] = _env_name_always

# Git status display
def _gitstatus_with_hash():
    commit_hash = $(git log --pretty=%h -n1).rstrip()
    git_status = $PROMPT_FIELDS['gitstatus']()
    if git_status is None:
        # Not in a git repository
        return None
    elif commit_hash in git_status:
        # The default git status already has what we want
        return git_status
    else:
        # Add the commit hash at the end of the branch name
        end_of_name_regex = '(\\||' + $XONSH_GITSTATUS_AHEAD + '|' + $XONSH_GITSTATUS_BEHIND + ')'
        return re.sub(end_of_name_regex, f': {commit_hash}{{NO_COLOR}}\\1', git_status, 1)
$PROMPT_FIELDS['gitstatus_hash'] = _gitstatus_with_hash

# Git status settings
$XONSH_GITSTATUS_AHEAD  = '{BACKGROUND_PURPLE}↑·'
$XONSH_GITSTATUS_BEHIND = '{BACKGROUND_CYAN}↓·'
$XONSH_GITSTATUS_BRANCH = '{YELLOW}'
$XONSH_GITSTATUS_CHANGED = '{NO_COLOR}{BLUE}+'
$XONSH_GITSTATUS_CLEAN = '{BOLD_GREEN}✓'
$XONSH_GITSTATUS_CONFLICTS = '{RED}×'
$XONSH_GITSTATUS_HASH = ''
$XONSH_GITSTATUS_OPERATION = '{CYAN}'
$XONSH_GITSTATUS_STAGED = '{GREEN}●'
$XONSH_GITSTATUS_STASHED = '{NO_COLOR}{WHITE}⚑'
$XONSH_GITSTATUS_UNTRACKED = '{NO_COLOR}{BOLD_BLACK}…'
# Actual prompt
$PROMPT = '{env_name_always:{} }{GREEN}{user}{YELLOW}{gitstatus_hash: ({})}{NO_COLOR} {BOLD_BLUE}{short_cwd}{prompt_end}{NO_COLOR} '

# Terminal title
$TITLE = '\N{SPIRAL SHELL} {current_job:{}: }{short_cwd}'

# Making aliases easy
def _bash_alias(args):
    # You have to fully quote each argument e.g. `alias 'ls=echo aaron is awesome'`
    for arg in args:
        if '=' in arg:
            # Setter
            name, content = arg.split('=', 1)
            aliases[name] = content
        else:
            # Getter
            name = args[0]
            print(aliases[name])
aliases['alias'] = _bash_alias

def _bash_unalias(args):
    for arg in args:
        del aliases[arg]
aliases['unalias'] = _bash_unalias

# Virtual environments with Vox
xontrib load vox
$VIRTUALENV_HOME = $HOME + '/.vox'

# Load aliases
source ~/.xonsh_aliases/.init.xsh

# Python virtual environments
def _curr():
    return  $(pwd).rsplit('/', 1)[1].rstrip()
def _vox_new(args):
    name = args[0] if args else _curr()
    version = args[1] if len(args) > 1 else None
    
    if version:
        $PYENV_VERSION_OLD = ${...}.get('PYENV_VERSION', None)
        $PYENV_VERSION=version
    vox new @(name)
    vox enter @(name)
    if version:
        $PYENV_VERSION=$PYENV_VERSION_OLD
def _vox_on(args):
    name = args[0] if args else _curr()
    vox enter @(name)
aliases['ve'] = _vox_on
aliases['vl'] = 'vox list'
aliases['vn'] = _vox_new
aliases['vrr'] = 'vox rm'
aliases['vx'] = 'vox exit'
